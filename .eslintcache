[{"F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\index.js":"1","F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\reportWebVitals.js":"2","F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\App.js":"3","F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\SummaryofIMS.jsx":"4","F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\TotalRequest.jsx":"5","F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\HrsPerRegion.jsx":"6","F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\DelaybyMonth.jsx":"7","F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\DelaybyRegion.jsx":"8","F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\DelaybyReason.jsx":"9","F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\ItterationperMonth.jsx":"10","F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\Drawerlayout.jsx":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":4198,"mtime":1611660207259,"results":"15","hashOfConfig":"13"},{"size":1073,"mtime":1611648584245,"results":"16","hashOfConfig":"13"},{"size":921,"mtime":1611648684747,"results":"17","hashOfConfig":"13"},{"size":1056,"mtime":1611648633797,"results":"18","hashOfConfig":"13"},{"size":1070,"mtime":1611648393724,"results":"19","hashOfConfig":"13"},{"size":1080,"mtime":1611648529828,"results":"20","hashOfConfig":"13"},{"size":1099,"mtime":1611648544787,"results":"21","hashOfConfig":"13"},{"size":1162,"mtime":1611660375204,"results":"22","hashOfConfig":"13"},{"size":7746,"mtime":1611660204373,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"nouek4",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\index.js",[],["49","50"],"F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\reportWebVitals.js",[],"F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\App.js",["51","52","53"],"import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport asana from \"asana\";\nimport Drawerlayout from \"./components/Drawerlayout\"\nimport { Typography, CircularProgress } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nconst token = \"1/1196026741848245:f60fabf352d8af6b500949e94733da11\";\n//const token = \"1/1176686911957013:249036f7326e929a495fb524a964875e\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n\n  },\n  header:{\n\t  display:'flex',\n\t  flexDirection:\"row\",\n\t  alignItem:\"center\",\n\t  justifyContent:\"center\",\n\t  color: theme.palette.text.primary,\n  },\n  top:{\n\t  backgroundColor: \"#ffffff\",\n      backgroundImage: \"linear-gradient(315deg, #ffffff 0%, #d7e1ec 74%)\",\n\t  display:'flex',\n\t  flexDirection:\"row\",\n\t  alignItem:\"center\",\n\t  justifyContent:\"center\",\n\t  color: \"white\",\n\t  paddingTop:\"40px\",\n  },\n}));\n\n\nconst App = () => {\n\tconst [taskDetails, setTaskDetails] = useState([]);\n\tconst [loading, setLoading] = useState(true);\n\tconst [didMount, setDidMount] = useState(false); \n\n\tconst client = asana.Client.create().useAccessToken(token);\n\tlet workspace_id = \"1176686913455770\";\n\tlet workspace_id_maersk = \"8532748615324\";\n\tlet projectids = [\"1195131443542906\",\"1196748897363362\",\"1196748897363378\",\"1196748897363370\",\"1196748897363386\",\"1195131443542908\",\"1196748897363396\",\"1196748897363403\",\"1196748897363410\",\"1196748897363417\",\"1195131443542910\",\"1196748897363424\",\"1196748897363431\",\"1196748897363445\",\"1196767649376098\",\"1195131443542912\",\"1196767649376105\",\"1196767649376112\",\"1196767649386098\",\"1196767649386105\",\"1195131443542914\",\"1196767649386112\",\"1196767649386119\",\"1196774294906906\",\"1196774294906913\",\"1194774484679347\",\"1196774294917920\",\"1196774294917906\",\"1196774294906920\",\"1196774294917927\",\"1195131443542916\",\"1196774294923913\",\"1196774294923906\",\"1196774294917934\",\"1196774294923920\",\"1197564797535760\",\"1197564797535767\",\"1197564797535782\",\"1197564797535789\",\"1197564797535796\"];\n\tconst classes = useStyles();\n\t\n\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tsetDidMount(true);\n\t\t\tlet tasks = projectids.map((project) =>\n\t\t\t\tclient.tasks\n\t\t\t\t\t.getTasksForProject(project, {limit:100 , opt_pretty: true })\n\t\t\t\t\t.then((result) => {\n\t\t\t\t\t\treturn result.data.map((r) => r.gid);\n\t\t\t\t\t}).catch(function (error) {\n\t\t\t\t\t\t\t\t// handle error\n\t\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t\t})\n\t\t\t);\n\n\t\t\tlet taskdetails = await Promise.all(tasks).then((result) =>\n\t\t\t\tresult.map((projects) =>\n\t\t\t\t\tprojects.map((taskid) =>\n\t\t\t\t\t\tclient.tasks\n\t\t\t\t\t\t\t.getTask(taskid, {opt_pretty: true })\n\t\t\t\t\t\t\t.then((taskdetails) => {\n\t\t\t\t\t\t\t\treturn taskdetails;\n\t\t\t\t\t\t\t}).catch(function (error) {\n\t\t\t\t\t\t\t\t// handle error\n\t\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tlet vals = taskdetails.map(async (tp) => {\n\t\t\t\tlet val = await Promise.all(tp).then((tpr) => {\n\t\t\t\t\tlet dt = tpr.map((tk) => {\n\t\t\t\t\t\tlet details = {\n\t\t\t\t\t\t\tgid: tk.gid,\n\t\t\t\t\t\t\tname: tk.name,\n\t\t\t\t\t\t\tcompleted_on: tk.completed_at,\n\t\t\t\t\t\t\tassignee: tk.assignee,\n\t\t\t\t\t\t\tcustomfield: tk.custom_fields,\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn details;\n\t\t\t\t\t});\n\t\t\t\t\treturn dt;\n\t\t\t\t});\n\t\t\t\treturn val;\n\t\t\t});\n\n\t\t\tawait Promise.all(vals).then((data) => {\n\t\t\t\tsetTaskDetails(data);\n\t\t\t});\n\t\t\tsetLoading(false);\n\t\t\treturn () => setDidMount(false);\n\t\t})();\n\t},[]);\n\tif(!didMount) {\n  return null;\n}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{loading === false ? (\n\t\t\t\t<div className={classes.root}>\n                     <Grid className={classes.top} container spacing={3}>\n\t\t\t\t        <Grid item xs className={classes.header}>\n\t\t                 <Typography variant=\"h3\">IMS Dashboard</Typography>\n                      </Grid>\n\t\t              <Grid item xs>\n\t\t                  < Drawerlayout details={taskDetails}/>\n                      </Grid>\n                      </Grid>\n\t             </div>\n\t\t\t) : (\n\t\t\t\t<div className=\"Loading\">\n\t\t\t\t\t<CircularProgress\n\t\t\t\t\t\tsize=\"10rem\"\n\t\t\t\t\t\tthickness={1.0}\n\t\t\t\t\t\tvariant=\"indeterminate\"\n\t\t\t\t\t/>\n\t\t\t\t\t<h4>Loading......</h4>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default App;\n","F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\SummaryofIMS.jsx",[],"F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\TotalRequest.jsx",[],"F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\HrsPerRegion.jsx",[],"F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\DelaybyMonth.jsx",[],"F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\DelaybyRegion.jsx",[],"F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\DelaybyReason.jsx",[],"F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\ItterationperMonth.jsx",[],"F:\\VSCode workspaces\\react_projects\\asana-dashboard\\src\\components\\Drawerlayout.jsx",["54","55","56","57","58","59","60","61","62"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles ,withStyles } from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport Box from '@material-ui/core/Box';\r\nimport HrsPerRegion from \"./HrsPerRegion\";\r\nimport SummaryofIMS from \"./SummaryofIMS\";\r\nimport TotalRequest from \"./TotalRequest\";\r\nimport DelaybyMonth from \"./DelaybyMonth\";\r\nimport DelaybyRegion from \"./DelaybyRegion\";\r\nimport DelaybyReason from \"./DelaybyReason\";\r\nimport ItterationperMonth from \"./ItterationperMonth\";\r\n\r\nconst AntTabs = withStyles({\r\n    root: {\r\n      borderBottom: '1px solid #e8e8e8',\r\n    },\r\n  })(Tabs);\r\n  \r\n  const AntTab = withStyles((theme) => ({\r\n    root: {\r\n      color:\"black\",\r\n      textTransform: 'none',\r\n      minWidth: 72,\r\n      fontWeight: 400,\r\n      fontSize:17,\r\n      marginRight: theme.spacing(4),\r\n      fontFamily: [\r\n        '-apple-system',\r\n        'BlinkMacSystemFont',\r\n        '\"Segoe UI\"',\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n        '\"Apple Color Emoji\"',\r\n        '\"Segoe UI Emoji\"',\r\n        '\"Segoe UI Symbol\"',\r\n      ].join(','),\r\n      '&:hover': {\r\n        color: '#40a9ff',\r\n        opacity: 1,\r\n      },\r\n      '&$selected': {\r\n        color: 'black',\r\n        fontWeight: 600,\r\n      },\r\n      '&:focus': {\r\n        color: 'black',\r\n      },\r\n    },\r\n    selected: {},\r\n  }))((props) => <Tab disableRipple {...props} />);\r\n  \r\n  \r\n\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n    return (\r\n        <div\r\n          role=\"tabpanel\"\r\n          hidden={value !== index}\r\n          id={`simple-tabpanel-${index}`}\r\n          aria-labelledby={`simple-tab-${index}`}\r\n          {...other}\r\n        >\r\n          {value === index && (\r\n            <Box component=\"span\" m={1}>\r\n              <Typography component={'span'} variant={'body2'}>{children}</Typography>\r\n            </Box>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    TabPanel.propTypes = {\r\n      children: PropTypes.node,\r\n      index: PropTypes.any.isRequired,\r\n      value: PropTypes.any.isRequired,\r\n    };\r\n    \r\n    function a11yProps(index) {\r\n      return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n      };\r\n    }\r\n    \r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n          flexGrow: 1,\r\n        },\r\n        padding: {\r\n          padding: theme.spacing(3),\r\n        },\r\n    }));\r\n    \r\n  \r\nconst Drawerlayout = ({ details }) => {\r\n    const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  let dataset = [];\r\n\tdetails.map((gr) => {\r\n\t\tgr.map((it) => {\r\n\t\t\tlet region = it.customfield.find(function (field, index) {\r\n\t\t\t\tif (field.name === \"Region\") {\r\n\t\t\t\t\treturn field;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tlet Hmonth = it.customfield.find(function (field, index) {\r\n\t\t\t\tif (field.name === \"Handshake sent date\") {\r\n\t\t\t\t\treturn field;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tlet sethours = it.customfield.find(function (field, index) {\r\n\t\t\t\tif (field.name === \"Set Hours\") {\r\n\t\t\t\t\treturn field;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tlet requesttype = it.customfield.find(function (field, index) {\r\n\t\t\t\tif (field.name === \"Type of Request\") {\r\n\t\t\t\t\treturn field;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tlet projectStatus = it.customfield.find(function (field, index) {\r\n\t\t\t\tif (field.name === \"Project Status\") {\r\n\t\t\t\t\treturn field;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tlet delayReasone = it.customfield.find(function (field, index) {\r\n\t\t\t\tif (field.name === \"Reason for delay\") {\r\n\t\t\t\t\treturn field;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tlet Citteration = it.customfield.find(function (field, index) {\r\n\t\t\t\tif (field.name === \"Current Iteration No.\") {\r\n\t\t\t\t\treturn field;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tlet data = {\r\n\t\t\t\tName: it.name,\r\n\t\t\t\tid: it.gid,\r\n\t\t\t\tassignee:\r\n\t\t\t\t\ttypeof it.assignee === \"undefined\" || it.assignee === null\r\n\t\t\t\t\t\t? \"none\"\r\n\t\t\t\t\t\t: it.assignee.name,\r\n\t\t\t\tRequest_Type:\r\n\t\t\t\t\ttypeof requesttype === \"undefined\"\r\n\t\t\t\t\t\t? \"none\"\r\n\t\t\t\t\t\t: requesttype.enum_value != null\r\n\t\t\t\t\t\t? requesttype.enum_value.name\r\n\t\t\t\t\t\t: \"none\",\r\n\t\t\t\tRegion:\r\n\t\t\t\t\ttypeof region === \"undefined\"\r\n\t\t\t\t\t\t? \"none\"\r\n\t\t\t\t\t\t: region.enum_value != null\r\n\t\t\t\t\t\t? region.enum_value.name\r\n\t\t\t\t\t\t: \"none\",\r\n\t\t\t\tHandshake_Month:\r\n\t\t\t\t\ttypeof Hmonth === \"undefined\"\r\n\t\t\t\t\t\t? \"none\"\r\n\t\t\t\t\t\t: Hmonth.text_value != null\r\n\t\t\t\t\t\t? new Date(Hmonth.text_value).toLocaleString(\"default\", {\r\n\t\t\t\t\t\t\t\tmonth: \"long\",\r\n\t\t\t\t\t\t  })\r\n\t\t\t\t\t\t: \"none\",\r\n\t\t\t\tSet_Hours:\r\n\t\t\t\t\ttypeof sethours === \"undefined\" || sethours === null\r\n\t\t\t\t\t\t? 0\r\n\t\t\t\t\t\t: sethours.number_value,\r\n\t\t\t\tProject_status:\r\n\t\t\t\t\ttypeof projectStatus === \"undefined\"\r\n\t\t\t\t\t\t? \"none\"\r\n\t\t\t\t\t\t: projectStatus.enum_value != null\r\n\t\t\t\t\t\t? projectStatus.enum_value.name\r\n\t\t\t\t\t\t: \"none\",\r\n\t\t\t\tReason_for_delay:\r\n\t\t\t\t\ttypeof delayReasone === \"undefined\"\r\n\t\t\t\t\t\t? \"none\"\r\n\t\t\t\t\t\t: delayReasone.enum_value != null\r\n\t\t\t\t\t\t? delayReasone.enum_value.name\r\n\t\t\t\t\t\t: \"none\",\r\n\t\t\t\tCurrent_ittr:\r\n\t\t\t\t\ttypeof Citteration === \"undefined\"\r\n\t\t\t\t\t\t? 0\r\n\t\t\t\t\t\t: Citteration.enum_value != null\r\n\t\t\t\t\t\t? Citteration.enum_value.name\r\n\t\t\t\t\t\t: 0,\r\n\t\t\t};\r\n\t\t\tdataset.push(data);\r\n\t\t});\r\n\t});\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <AntTabs value={value} onChange={handleChange} centered aria-label=\"ant example\">\r\n              <AntTab label=\"Remaining Hours Summary\" {...a11yProps(0)} />\r\n              <AntTab label=\"No of Requests\" {...a11yProps(1)} />\r\n              <AntTab label=\"Delay Summary\" {...a11yProps(2)} />\r\n              <AntTab label=\"Itterations\" {...a11yProps(3)} />\r\n        </AntTabs>\r\n          <TabPanel value={value} index={0}>\r\n          <Card className=\"container\">\r\n\t\t\t<CardContent>\r\n            <SummaryofIMS data={dataset} />\r\n            <Typography variant=\"h5\">Set Hours / Remaining Time per Month</Typography>\r\n            </CardContent>\r\n\t\t</Card>\r\n        <Card className=\"container\">\r\n\t\t\t<CardContent>\r\n            <HrsPerRegion data={dataset} />\r\n            <Typography variant=\"h5\">Set Hours / Remaining Time per Month</Typography>\r\n            </CardContent>\r\n\t\t</Card>\r\n          </TabPanel>\r\n         <TabPanel value={value} index={1}>\r\n          <Card className=\"container\">\r\n\t\t\t<CardContent>\r\n            <TotalRequest data={dataset} />\r\n            <Typography variant=\"h5\">Total Num Request per Month</Typography>                        \r\n            </CardContent>\r\n\t\t</Card>\r\n          </TabPanel>\r\n          <TabPanel value={value} index={2}>\r\n          <Card className=\"container\">\r\n\t\t\t<CardContent>\r\n            <DelaybyMonth data={dataset} />\r\n            <Typography variant=\"h5\">Delay per Month</Typography>                    \r\n            </CardContent>\r\n\t\t</Card>\r\n        <Card className=\"container\">\r\n\t\t\t<CardContent>\r\n            <DelaybyRegion data={dataset} /> \r\n            <Typography variant=\"h5\">Delay per Region</Typography>                     \r\n            </CardContent>\r\n\t\t</Card>\r\n        <Card className=\"container\">\r\n\t\t\t<CardContent>\r\n            <DelaybyReason data={dataset} />\r\n            <Typography variant=\"h5\">Delay per Reason</Typography>                        \r\n            </CardContent>\r\n\t\t</Card>\r\n          </TabPanel>\r\n        <TabPanel value={value} index={3}>\r\n          <Card className=\"container\">\r\n\t\t\t<CardContent>\r\n            <ItterationperMonth data={dataset} />\r\n            <Typography variant=\"h5\">Num of Itterations per Month</Typography>                         \r\n            </CardContent>\r\n\t\t</Card>\r\n          </TabPanel>\r\n        </div>\r\n      );\r\n};\r\n\r\nexport default Drawerlayout;",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":47,"column":6,"nodeType":"69","messageId":"70","endLine":47,"endColumn":18},{"ruleId":"67","severity":1,"message":"71","line":48,"column":6,"nodeType":"69","messageId":"70","endLine":48,"endColumn":25},{"ruleId":"72","severity":1,"message":"73","line":106,"column":4,"nodeType":"74","endLine":106,"endColumn":6,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":107,"column":19,"nodeType":"78","messageId":"79","endLine":107,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":108,"column":15,"nodeType":"78","messageId":"79","endLine":108,"endColumn":17},{"ruleId":"76","severity":1,"message":"80","line":109,"column":37,"nodeType":"81","messageId":"82","endLine":109,"endColumn":46},{"ruleId":"76","severity":1,"message":"80","line":114,"column":37,"nodeType":"81","messageId":"82","endLine":114,"endColumn":46},{"ruleId":"76","severity":1,"message":"80","line":119,"column":39,"nodeType":"81","messageId":"82","endLine":119,"endColumn":48},{"ruleId":"76","severity":1,"message":"80","line":124,"column":42,"nodeType":"81","messageId":"82","endLine":124,"endColumn":51},{"ruleId":"76","severity":1,"message":"80","line":129,"column":44,"nodeType":"81","messageId":"82","endLine":129,"endColumn":53},{"ruleId":"76","severity":1,"message":"80","line":134,"column":43,"nodeType":"81","messageId":"82","endLine":134,"endColumn":52},{"ruleId":"76","severity":1,"message":"80","line":139,"column":42,"nodeType":"81","messageId":"82","endLine":139,"endColumn":51},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'workspace_id' is assigned a value but never used.","Identifier","unusedVar","'workspace_id_maersk' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'client.tasks' and 'projectids'. Either include them or remove the dependency array.","ArrayExpression",["85"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.find() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [client.tasks, projectids]",{"range":"88","text":"89"},[3440,3442],"[client.tasks, projectids]"]